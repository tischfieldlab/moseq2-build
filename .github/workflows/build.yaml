name: Build Moseq2 Container

on:
  repository_dispatch:
  push:
    #branches: [ master ] TODO: UNCOMMENT THIS
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1'

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libseccomp-dev \
          pkg-config \
          squashfs-tools \
          cryptsetup \
          uuid-dev

    - name: Checkout moseq2-build
      uses: actions/checkout@v2
      with:
        path: moseq2-build
        fetch-depth: 0

    - name: List checkout contents
      run: |
        ls
        pwd
        ls /home/runner/work/moseq2-build/moseq2-build/moseq2-build/moseq2_build/flip_classifiers

    - name: Fetch Version String
      id: getversion
      run: |
        baseversion=$(grep -oP "version='\K([\.\d]+)" ./moseq2-build/setup.py)
        fullversion=v$baseversion.${{ github.run_number }}
        echo $fullversion > ./version.txt
        echo "::set-output name=version::$(cat ./version.txt)"
        cat ./version.txt

    - name: Checkout Singularity
      uses: actions/checkout@v2
      with:
        repository: sylabs/singularity
        ref: v3.5.0
        path: singularity
        fetch-depth: 1

    - name: Build Singularity
      run: |
        cd singularity
        ./mconfig
        make -C ./builddir
        sudo make -C ./builddir install
        cd ..

    - name: Build moseq2 Docker File
      run: |
        mkdir /tmp/image
        cp -r /home/runner/work/moseq2-build/moseq2-build/moseq2-build/moseq2_build/flip_classifiers/ ./moseq2-build/flip_files
        docker build -t moseq2 --build-arg SERVICE_TOKEN=${{ secrets.SERVICE_ACCOUNT_TOKEN }} --build-arg GIT_NAME=${{ secrets.SERVICE_ACCOUNT }} ./moseq2-build/
        ls

    - name: Convert Docker Image to Singularity Image
      run: |
        docker run -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/image:/output --privileged -t --rm quay.io/singularity/docker2singularity moseq2
        docker image save moseq2 > moseq2-docker.tar
        ls /tmp/image
    
    - name: Prepare Images For Release
      id: bundle
      run: |
        SUFFIX="${{ steps.getversion.outputs.version }}.tar.gz"

        SINGUL_RELEASE="moseq2-singularity.${SUFFIX}"
        echo "::set-output name=SINGUL_RELEASE::${SINGUL_RELEASE}"

        DOCKER_RELEASE="moseq2-docker.${SUFFIX}"
        echo "::set-output name=DOCKER_RELEASE::${DOCKER_RELEASE}"

        mv /tmp/image .
        tar -czvf ${SINGUL_RELEASE} image
        rm -rf image
        mkdir image

        tar -xf moseq2-docker.tar -C ./image
        tar -czvf ${DOCKER_RELEASE} ./image

    - name: Upload Docker Artifact
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      uses: actions/upload-artifact@v2
      with:
        name: Docker
        path: ${{ steps.bundle.outputs.DOCKER_RELEASE }}

    - name: Upload Singularity Artifact
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      uses: actions/upload-artifact@v2
      with:
        name: Singularity
        path: ${{ steps.bundle.outputs.SINGUL_RELEASE }}

    - name: Upload Version Artifact
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      uses: actions/upload-artifact@v2
      with:
        name: Version
        path: ./version.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2

    - name: Read VERSION file
      id: getversion
      run: |
        echo "::set-output name=version::$(cat ./Version/version.txt)"
        cat ./Version/version.txt

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.getversion.outputs.version }}
        release_name: Release ${{ steps.getversion.outputs.version }}
        draft: true
        prerelease: false

    - run: |
        dir

    - name: Upload Release Assets
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./**/*.tar.gz
